name: Build CI-CD

on:
  push:
    branches:
      - main

jobs:
  mssql:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: "YourStrong!Passw0rd"
        ports:
          - 1433:1433

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Wait for SQL Server to Be Ready
      run: |
        for i in {1..10}; do
          if /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "YourStrong!Passw0rd" -Q "SELECT 1" > /dev/null 2>&1; then
            echo "SQL Server is ready!"
            break
          fi
          echo "Waiting for SQL Server..."
          sleep 5
        done
    
        # Fail the step if the server is still not available
        if ! /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "YourStrong!Passw0rd" -Q "SELECT 1"; then
          echo "SQL Server is not ready after waiting."
          exit 1
        fi

    - name: Install SQLCMD Tools
      run: |
        sudo apt-get update
        sudo apt-get install -y mssql-tools unixodbc-dev
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc

    - name: Execute SQL Scripts from Folder
      run: |
        for file in ./.GitHub-CI/Database/*.sql; do
          echo "Executing $file..."
          /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "YourStrong!Passw0rd" -i $file
        done

    # Step 5: Install Mockoon CLI
    - name: Install Mockoon CLI
      run: |
        npm install -g @mockoon/cli
    # Step 6: Start Mockoon Server Instances
    - name: Start Mockoon Servers
      run: |
        nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_LPRestClaimAPI.json --port 3000 > ./mockoon-3000.log 2>&1 &
        nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_LPRestPartyAPI.json --port 3001 > ./mockoon-3001.log 2>&1 &
        nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_LPRestPolicyAPI.json --port 3002 > ./mockoon-3002.log 2>&1 &
        nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_LPRestProductAPI.json --port 3003 > ./mockoon-3003.log 2>&1 &
        nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_UserMgmtService.json --port 3004 > ./mockoon-3004.log 2>&1 &
        nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/LDS/LDS_Workflow_CommonService.json --port 3005 > ./mockoon-3005.log 2>&1 &
        nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/LDS/LDS_Workflow_UnderWritingService.json --port 3006 > ./mockoon-3006.log 2>&1 &
        nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/LDS/LDS_Workflow_WorkflowService.json --port 3007 > ./mockoon-3007.log 2>&1 &
        nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/InsuranceServices/InsuranceServices.json --port 3008 > ./mockoon-3008.log 2>&1 &



    - name: Wait for Mockoon Servers to Start
      run: |
        for port in 3000 3001 3002 3003 3004 3005 3006 3007 3008; do
          for i in {1..10}; do
            if curl --silent http://localhost:$port; then
              echo "Mockoon server on port $port is ready"
              break
            fi
            echo "Waiting for Mockoon server on port $port..."
            sleep 3
          done
        done


    - name: Check Mockoon Logs
      run: |
        tail ./mockoon-*.log


# Step 7: Verify Mockoon Server is Running
    - name: Validate Mockoon Servers
      run: |
        # Define the ports to check
        ports=(3000 3001 3002 3003 3004 3005 3006 3007 3008)

        # Check if each port is open
        for port in "${ports[@]}"; do
          for i in {1..10}; do
            # Check if the port is listening using netcat
            if nc -zv localhost $port 2>/dev/null; then
              echo "Mockoon server on port $port is ready"
              break
            fi
            echo "Waiting for Mockoon server on port $port..."
            sleep 3
          done
        done


