name: Insurance Business Services Build - A.R.C.H.E.R

on:
  push:
    branches:
      - development  # Trigger on push to the development branch

jobs:
  # Job 1: Setup Environment
  Setup-Environment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'  # Specify Node.js version

      - name: Authenticate with GitHub (using PAT secret)
        run: |
          git config --global url."https://${{ secrets.PAT }}@github.com/".insteadOf "https://github.com/"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create Insurance-Business-Services folder
        run: |
          mkdir -p Insurance-Business-Services
          echo "Insurance-Business-Services folder created." # Debugging line
          ls -al Insurance-Business-Services/  # Debugging: Check contents

      - name: Upload Insurance-Business-Services as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: insurance-business-services
          path: Insurance-Business-Services/
        # Added check: print contents of the folder before uploading
      - name: List contents before uploading artifact
        run: ls -al Insurance-Business-Services/

  # Job 2: Pull LIPAS-Client
  Pull-LIPAS-Client:
    runs-on: ubuntu-latest
    needs: Setup-Environment

    steps:
      - name: Download Insurance-Business-Services Artifact
        uses: actions/download-artifact@v3
        with:
          name: insurance-business-services
          path: Insurance-Business-Services/

      - name: List contents of Insurance-Business-Services
        run: ls -al Insurance-Business-Services/
        # This will help verify the folder structure and contents after download.

      - name: Pull LIPAS-Client repository
        run: |
          cd Insurance-Business-Services
          git clone --branch development https://github.com/VAINS-Dev/LIPAS-Client.git
          cd LIPAS-Client
          npm install

      - name: Upload LIPAS-Client as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: lipas-client
          path: Insurance-Business-Services/LIPAS-Client/

  # Job 3: Pull A.R.C.H.E.R
  Pull-ARCHER:
    runs-on: ubuntu-latest
    needs: Pull-LIPAS-Client

    steps:
      - name: Download LIPAS-Client artifact
        uses: actions/download-artifact@v3
        with:
          name: lipas-client
          path: Insurance-Business-Services/LIPAS-Client/

      - name: List contents of LIPAS-Client folder
        run: ls -al Insurance-Business-Services/LIPAS-Client/

      - name: Pull A.R.C.H.E.R repository
        run: |
          cd Insurance-Business-Services
          git clone --branch development https://github.com/VAINS-Dev/A.R.C.H.E.R.git
          cd A.R.C.H.E.R
          npm install

      - name: Upload A.R.C.H.E.R as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: archer
          path: Insurance-Business-Services/A.R.C.H.E.R/

  # Continue with Setup-Database and other jobs
  
  # Job 4: Setup Database
  Setup-Database:
    runs-on: ubuntu-latest
    needs: [Pull-LIPAS-Client, Pull-ARCHER]

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: ${{ secrets.SA_PASSWORD }}  # Use secret for SA_PASSWORD
        ports:
          - 1433:1433

    steps:
      - name: Download LIPAS-Client Artifact
        uses: actions/download-artifact@v3
        with:
          name: lipas-client
          path: Insurance-Business-Services/LIPAS-Client/

      - name: Install SQLCMD Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Wait for SQL Server to be Ready
        run: |
          for i in {1..30}; do  # Increased retries and wait time
            echo "Attempt $i to connect to SQL Server"
            if /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "${{ secrets.SA_PASSWORD }}" -Q "SELECT 1" > /dev/null 2>&1; then
              echo "SQL Server is ready!"
              break
            fi
            echo "Waiting for SQL Server..."
            sleep 10
          done

          # Fail the step if the server is still not available
          if ! /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "${{ secrets.SA_PASSWORD }}" -Q "SELECT 1"; then
            echo "SQL Server is not ready after waiting."
            exit 1
          fi

      - name: Execute SQL Scripts
        run: |
          # Navigate to the folder containing the SQL scripts
          cd Insurance-Business-Services/LIPAS-Client/.GitHub-CI/Database

          # List the files for debugging
          echo "Listing SQL scripts:"
          ls -la

          # Run all SQL scripts in the directory
          for sql_file in *.sql; do
            echo "Executing $sql_file"
            /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "${{ secrets.SA_PASSWORD }}" -d master -i "$sql_file"
            if [ $? -ne 0 ]; then
              echo "Error executing $sql_file"
              exit 1
            fi
          done

  # Job 5: Mockoon Setup
  Mockoon:
    runs-on: ubuntu-latest
    needs: Setup-Database

    steps:
      - name: Download LIPAS-Client Artifact
        uses: actions/download-artifact@v3
        with:
          name: lipas-client
          path: Insurance-Business-Services/LIPAS-Client/

      - name: Download A.R.C.H.E.R Artifact (if needed)
        uses: actions/download-artifact@v3
        with:
          name: archer
          path: Insurance-Business-Services/A.R.C.H.E.R/

      - name: Set up Mockoon CLI
        run: |
          curl -sSL https://github.com/mockoon/mockoon-cli/releases/download/v1.3.0/mockoon-cli-1.3.0-linux-x86_64.tar.gz | tar xz
          sudo mv mockoon-cli /usr/local/bin/mockoon-cli

      - name: Start Mockoon Servers
        run: |
          cd Insurance-Business-Services/LIPAS-Client
          nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_LPRestClaimAPI.json --port 3000 > ./mockoon-3000.log 2>&1 &
          nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_LPRestPartyAPI.json --port 3001 > ./mockoon-3001.log 2>&1 &
          nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_LPRestPolicyAPI.json --port 3002 > ./mockoon-3002.log 2>&1 &
          nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_LPRestProductAPI.json --port 3003 > ./mockoon-3003.log 2>&1 &
          nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/V20.SP4/EXL_LifePRO_UserMgmtService.json --port 3004 > ./mockoon-3004.log 2>&1 &
          nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/LDS/LDS_Workflow_CommonService.json --port 3005 > ./mockoon-3005.log 2>&1 &
          nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/LDS/LDS_Workflow_UnderWritingService.json --port 3006 > ./mockoon-3006.log 2>&1 &
          nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/LDS/LDS_Workflow_WorkflowService.json --port 3007 > ./mockoon-3007.log 2>&1 &
          nohup mockoon-cli start --data ./.GitHub-CI/Mockoon/InsuranceServices/InsuranceServices.json --port 3008 > ./mockoon-3008.log 2>&1 &

      - name: Wait for Mockoon Servers to Start
        run: |
          for port in 3000 3001 3002 3003 3004 3005 3006 3007 3008; do
            for i in {1..10}; do
              if curl --silent http://localhost:$port; then
                echo "Mockoon server on port $port is ready"
                break
              fi
              echo "Waiting for Mockoon server on port $port..."
              sleep 3
            done
          done

      - name: Check Mockoon Logs
        run: |
          tail ./mockoon-*.log

      - name: Log Mockoon service is running
        run: |
          ps aux | grep mockoon

  # Job 6: Build and Deploy
  Build-And-Deploy:
    runs-on: ubuntu-latest
    needs: Mockoon

    steps:
      - name: Download Insurance-Business-Services Artifact
        uses: actions/download-artifact@v3
        with:
          name: insurance-business-services
          path: Insurance-Business-Services/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'  # Specify Node.js version

      - name: Authenticate with GitHub (using PAT secret)
        run: |
          git config --global url."https://${{ secrets.PAT }}@github.com/".insteadOf "https://github.com/"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Log successful completion of resource fetching in Build-And-Deploy
        run: echo "Repositories successfully fetched from artifacts."

      - name: Build and deploy
        run: |
          # Your deployment commands here
          echo "Build and deploy completed!"