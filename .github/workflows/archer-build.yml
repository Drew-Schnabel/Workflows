name: Insurance Business Services Build - A.R.C.H.E.R

on:
  push:
    branches:
      - development  # Trigger on push to the development branch

jobs:
  # SQL Server Setup
  mssql:
    runs-on: ubuntu-latest

    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: "Y"
          SA_PASSWORD: ${{ secrets.SA_PASSWORD }}  # Use secret for SA_PASSWORD
        ports:
          - 1433:1433

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Wait for SQL Server to be Ready
        run: |
          for i in {1..10}; do
            if /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "${{ secrets.SA_PASSWORD }}" -Q "SELECT 1" > /dev/null 2>&1; then
              echo "SQL Server is ready!"
              break
            fi
            echo "Waiting for SQL Server..."
            sleep 5
          done
          # Fail the step if the server is still not available
          if ! /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "${{ secrets.SA_PASSWORD }}" -Q "SELECT 1"; then
            echo "SQL Server is not ready after waiting."
            exit 1
          fi

      - name: Install SQLCMD Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
          source ~/.bashrc

      - name: Execute SQL Scripts
        run: |
          # Navigate to the folder containing the SQL scripts
          cd LIPAS-Client/.GitHub-CI/Database

          # Run all SQL scripts in the directory
          for sql_file in *.sql; do
            echo "Executing $sql_file"
            /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "${{ secrets.SA_PASSWORD }}" -d master -i "$sql_file"
            if [ $? -ne 0 ]; then
              echo "Error executing $sql_file"
              exit 1
            fi
          done

  # Mockoon Service Setup
  mockoon:
    runs-on: ubuntu-latest
    needs: mssql  # Ensure mssql job runs first

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Mockoon
        run: |
          curl -sSL https://github.com/mockoon/mockoon-cli/releases/download/v1.3.0/mockoon-cli-1.3.0-linux-x86_64.tar.gz | tar xz
          sudo mv mockoon-cli /usr/local/bin/mockoon-cli
          mockoon-cli start --data /path/to/your/mockoon-data.json &

      - name: Log Mockoon service is running
        run: |
          ps aux | grep mockoon

  # Fetch-Resources Job
  Fetch-Resources:
    runs-on: ubuntu-latest

    needs: [mssql, mockoon]  # Ensure that SQL and Mockoon services are running

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'  # Specify Node.js version

      - name: Authenticate with GitHub (using PAT secret)
        run: |
          git config --global url."https://${{ secrets.PAT }}@github.com/".insteadOf "https://github.com/"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create folder and navigate into it
        run: |
          mkdir -p Insurance-Business-Services
          cd Insurance-Business-Services

      - name: Git Pull - LIPAS-Client
        run: |
          cd Insurance-Business-Services
          git clone --branch development https://github.com/VAINS-Dev/LIPAS-Client.git
          cd LIPAS-Client
          npm install

      - name: Git Pull - A.R.C.H.E.R
        run: |
          cd Insurance-Business-Services
          git clone --branch development https://github.com/VAINS-Dev/A.R.C.H.E.R.git
          cd A.R.C.H.E.R
          npm install

      - name: Log successful completion
        run: echo "Repositories successfully cloned and dependencies installed."